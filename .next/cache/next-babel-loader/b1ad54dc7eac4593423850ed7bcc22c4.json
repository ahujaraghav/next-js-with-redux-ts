{"ast":null,"code":"import { CookieStorage } from 'redux-persist-cookie-storage';\nimport Cookies from 'cookies-js';\nimport CookiesServer from 'cookies';\nimport NodeCookiesWrapper from './nodeCookieWrapper';\nimport DefaultStorage from 'redux-persist/lib/storage';\nexport default function CustomCookieStorage(req, res) {\n  var cookieStorage;\n\n  if (false) {\n    if (!req) {\n      console.warn(\"request object is required in ssr store initalization\");\n      cookieStorage = DefaultStorage;\n    } else {\n      var cookieJar = new NodeCookiesWrapper(CookiesServer(req, res));\n      cookieStorage = new CookieStorage(cookieJar);\n    }\n  } else {\n    cookieStorage = new CookieStorage(Cookies);\n  }\n\n  return cookieStorage;\n}","map":{"version":3,"sources":["/Users/raghavahuja/playground/next_ts/src/utils/helpers/customCookieStorage.ts"],"names":["CookieStorage","Cookies","CookiesServer","NodeCookiesWrapper","DefaultStorage","CustomCookieStorage","req","res","cookieStorage","console","warn","cookieJar"],"mappings":"AAAA,SAASA,aAAT,QAA8B,8BAA9B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,aAAP,MAA0B,SAA1B;AACA,OAAOC,kBAAP,MAA+B,qBAA/B;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AAGA,eAAe,SAASC,mBAAT,CAA6BC,GAA7B,EAAkCC,GAAlC,EAAuC;AACpD,MAAIC,aAAJ;;AACA,aAAmC;AACjC,QAAI,CAACF,GAAL,EAAU;AACRG,MAAAA,OAAO,CAACC,IAAR,CAAa,uDAAb;AACAF,MAAAA,aAAa,GAAGJ,cAAhB;AACD,KAHD,MAGO;AACL,UAAMO,SAAS,GAAG,IAAIR,kBAAJ,CAAuBD,aAAa,CAACI,GAAD,EAAMC,GAAN,CAApC,CAAlB;AACAC,MAAAA,aAAa,GAAG,IAAIR,aAAJ,CAAkBW,SAAlB,CAAhB;AACD;AACF,GARD,MAQO;AACLH,IAAAA,aAAa,GAAG,IAAIR,aAAJ,CAAkBC,OAAlB,CAAhB;AACD;;AAED,SAAOO,aAAP;AACD","sourcesContent":["import { CookieStorage } from 'redux-persist-cookie-storage'\nimport Cookies from 'cookies-js'\nimport CookiesServer from 'cookies'\nimport NodeCookiesWrapper from './nodeCookieWrapper'\nimport DefaultStorage from 'redux-persist/lib/storage'\n\n\nexport default function CustomCookieStorage(req, res) {\n  let cookieStorage: any\n  if (typeof window === 'undefined') {\n    if (!req) {\n      console.warn(\"request object is required in ssr store initalization\")\n      cookieStorage = DefaultStorage\n    } else {\n      const cookieJar = new NodeCookiesWrapper(CookiesServer(req, res))\n      cookieStorage = new CookieStorage(cookieJar)\n    }\n  } else {\n    cookieStorage = new CookieStorage(Cookies)\n  }\n\n  return cookieStorage\n}\n"]},"metadata":{},"sourceType":"module"}