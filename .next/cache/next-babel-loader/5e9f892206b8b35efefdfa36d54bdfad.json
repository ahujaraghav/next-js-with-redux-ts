{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/raghavahuja/playground/next_ts/src/hocs/WithReduxStore.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { initializeStore } from '../redux/config';\nvar isServer = false; // Called for every route\n\nfunction getOrCreateStore(req, res) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(req, res);\n  } // Client side store initialization\n\n\n  if (!window['redux-store']) {\n    window['redux-store'] = initializeStore();\n  } // returned on every route change\n\n\n  return window['redux-store'];\n}\n\nexport default (function (Component) {\n  var _temp;\n\n  return _temp =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(AppWithRedux, _React$Component);\n\n    _createClass(AppWithRedux, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(appContext) {\n          var completeStore, appProps;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  completeStore = getOrCreateStore(appContext.ctx.req, appContext.ctx.res); // Provide the store to getInitialProps of pages\n\n                  appContext.ctx.reduxStore = completeStore.store;\n                  appContext.ctx.persistor = completeStore.persistor;\n                  appProps = {};\n                  _context.next = 6;\n                  return new _Promise(function (resolve, reject) {\n                    var _completeStore$persis = completeStore.persistor.getState(),\n                        bootstrapped = _completeStore$persis.bootstrapped;\n\n                    if (bootstrapped) {\n                      resolve();\n                    }\n\n                    completeStore.persistor.subscribe(function () {\n                      var _completeStore$persis2 = completeStore.persistor.getState(),\n                          bootstrapped = _completeStore$persis2.bootstrapped;\n\n                      if (bootstrapped) {\n                        resolve();\n                      }\n                    });\n                  });\n\n                case 6:\n                  if (!(typeof Component.getInitialProps === 'function')) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  _context.next = 9;\n                  return Component.getInitialProps(appContext);\n\n                case 9:\n                  appProps = _context.sent;\n\n                case 10:\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    reduxStore: completeStore.store,\n                    persistor: completeStore.persistor\n                  }));\n\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function AppWithRedux(props) {\n      var _this;\n\n      _classCallCheck(this, AppWithRedux);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AppWithRedux).call(this, props));\n\n      _defineProperty(_assertThisInitialized(_this), \"reduxStore\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"persistor\", void 0);\n\n      _this.reduxStore = props.reduxStore;\n      _this.persistor = props.persistor;\n\n      if (!props.reduxStore.dispatch || !props.persistor.dispatch) {\n        var completeStore = getOrCreateStore();\n        _this.reduxStore = completeStore.store;\n        _this.persistor = completeStore.persistor;\n      } // on first request, getInitProps is called on server and therefore store is not available via props\n      // getOrCreateStore will always create store on server side, on client side it will create store if not there or return the previously created store.\n\n\n      return _this;\n    }\n\n    _createClass(AppWithRedux, [{\n      key: \"render\",\n      value: function render() {\n        return __jsx(Component, _extends({}, this.props, {\n          reduxStore: this.reduxStore,\n          persistor: this.persistor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return AppWithRedux;\n  }(React.Component), _temp;\n});","map":{"version":3,"sources":["/Users/raghavahuja/playground/next_ts/src/hocs/WithReduxStore.tsx"],"names":["React","initializeStore","isServer","getOrCreateStore","req","res","window","Component","appContext","completeStore","ctx","reduxStore","store","persistor","appProps","resolve","reject","getState","bootstrapped","subscribe","getInitialProps","props","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { initializeStore } from '../redux/config'\nimport { Store } from 'redux';\nimport NextComponent, { AppContext } from 'next/app'\nimport { NextComponentType, NextPageContext } from 'next';\nimport { Persistor } from 'redux-persist';\n\nexport interface CustomPageContext extends NextPageContext {\n  reduxStore: Store,\n  persistor: Persistor\n}\n\ninterface CustomAppContext extends AppContext {\n  ctx: CustomPageContext\n}\n\nconst isServer = typeof window === 'undefined'\n\n// Called for every route\nfunction getOrCreateStore(req?, res?): { store: Store, persistor: Persistor } {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(req, res)\n  }\n\n  // Client side store initialization\n  if (!window['redux-store']) {\n    window['redux-store'] = initializeStore()\n  }\n\n  // returned on every route change\n  return window['redux-store']\n}\n\nexport default (Component: any) => {\n  return class AppWithRedux extends React.Component {\n\n    static async getInitialProps(appContext: CustomAppContext) {\n\n      const completeStore = getOrCreateStore(appContext.ctx.req, appContext.ctx.res)\n\n      // Provide the store to getInitialProps of pages\n      appContext.ctx.reduxStore = completeStore.store\n      appContext.ctx.persistor = completeStore.persistor\n\n      let appProps = {}\n\n      await new Promise((resolve, reject) => {\n        let { bootstrapped } = completeStore.persistor.getState()\n\n        if (bootstrapped) {\n          resolve()\n        }\n\n        completeStore.persistor.subscribe(() => {\n          let { bootstrapped } = completeStore.persistor.getState()\n          if (bootstrapped) {\n            resolve()\n          }\n\n        })\n\n      })\n\n      if (typeof Component.getInitialProps === 'function') {\n        // appProps = { pageProps: {} }, internally by next component\n        appProps = await Component.getInitialProps(appContext)\n      }\n\n      return {\n        ...appProps,\n        reduxStore: completeStore.store,\n        persistor: completeStore.persistor\n      }\n\n    }\n\n    reduxStore: Store\n    persistor: Persistor\n    constructor(props) {\n      super(props)\n\n      this.reduxStore = props.reduxStore\n      this.persistor = props.persistor\n\n      if (!props.reduxStore.dispatch || !props.persistor.dispatch) {\n        const completeStore = getOrCreateStore()\n        this.reduxStore = completeStore.store\n        this.persistor = completeStore.persistor\n      }\n      // on first request, getInitProps is called on server and therefore store is not available via props\n      // getOrCreateStore will always create store on server side, on client side it will create store if not there or return the previously created store.\n\n    }\n\n    render() {\n      return <Component {...this.props} reduxStore={this.reduxStore} persistor={this.persistor} />\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}