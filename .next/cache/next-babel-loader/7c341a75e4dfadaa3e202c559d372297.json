{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/raghavahuja/playground/next_ts/src/hocs/ProtectedRoute.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Router from 'next/router';\nimport { connect } from 'react-redux';\n\n/** Implement your own default route checking function */\nconst defaultCheck = state => {\n  // should return boolean\n  return state.user.role === 'admin';\n};\n/** Redirect url incase of authentication failure */\n\n\nconst REDIRECT_URL = \"/login\";\n/** Actual Logic, no need to change */\n\nexport default function (Component, routeChecker = defaultCheck) {\n  class ProtectedRoute extends React.Component {\n    static async getInitialProps(pageContext) {\n      const res = pageContext.res;\n\n      if (!routeChecker(pageContext.reduxStore.getState())) {\n        if (true) {\n          res.writeHead(302, {\n            Location: REDIRECT_URL\n          });\n          res.end();\n        } else {\n          Router.replace(REDIRECT_URL);\n        }\n      }\n\n      let appProps = {};\n\n      if (typeof Component.getInitialProps === 'function') {\n        appProps = await Component.getInitialProps(pageContext);\n      }\n\n      return {\n        pageProps: _objectSpread({}, appProps)\n      };\n    }\n\n    render() {\n      return __jsx(Component, _extends({}, this.props.pageProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    }\n\n  }\n\n  const mapStateToProps = state => {\n    return {\n      state\n    };\n  };\n\n  return connect(mapStateToProps)(ProtectedRoute);\n}","map":{"version":3,"sources":["/Users/raghavahuja/playground/next_ts/src/hocs/ProtectedRoute.tsx"],"names":["React","Router","connect","defaultCheck","state","user","role","REDIRECT_URL","Component","routeChecker","ProtectedRoute","getInitialProps","pageContext","res","reduxStore","getState","writeHead","Location","end","replace","appProps","pageProps","render","props","mapStateToProps"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAaA;AACA,MAAMC,YAAwB,GAAIC,KAAD,IAAW;AAC1C;AACA,SAAOA,KAAK,CAACC,IAAN,CAAWC,IAAX,KAAoB,OAA3B;AACD,CAHD;AAKA;;;AACA,MAAMC,YAAY,GAAG,QAArB;AAGA;;AACA,eAAe,UAAUC,SAAV,EAAwCC,YAAwB,GAAGN,YAAnE,EAAiF;AAE9F,QAAMO,cAAN,SAA6BV,KAAK,CAACQ,SAAnC,CAAuD;AAErD,iBAAaG,eAAb,CAA6BC,WAA7B,EAAgF;AAC9E,YAAMC,GAAG,GAAGD,WAAW,CAACC,GAAxB;;AACA,UAAI,CAACJ,YAAY,CAACG,WAAW,CAACE,UAAZ,CAAuBC,QAAvB,EAAD,CAAjB,EAAsD;AACpD,kBAAmC;AACjCF,UAAAA,GAAG,CAACG,SAAJ,CAAc,GAAd,EAAmB;AACjBC,YAAAA,QAAQ,EAAEV;AADO,WAAnB;AAGAM,UAAAA,GAAG,CAACK,GAAJ;AACD,SALD,MAKO;AACLjB,UAAAA,MAAM,CAACkB,OAAP,CAAeZ,YAAf;AACD;AACF;;AAED,UAAIa,QAAQ,GAAG,EAAf;;AACA,UAAI,OAAOZ,SAAS,CAACG,eAAjB,KAAqC,UAAzC,EAAqD;AACnDS,QAAAA,QAAQ,GAAG,MAAMZ,SAAS,CAACG,eAAV,CAA0BC,WAA1B,CAAjB;AACD;;AACD,aAAO;AAAES,QAAAA,SAAS,oBAAOD,QAAP;AAAX,OAAP;AACD;;AAEDE,IAAAA,MAAM,GAAG;AACP,aAAO,MAAC,SAAD,eAAe,KAAKC,KAAL,CAAWF,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AAxBoD;;AA2BvD,QAAMG,eAAe,GAAIpB,KAAD,IAAuB;AAC7C,WAAO;AAAEA,MAAAA;AAAF,KAAP;AACD,GAFD;;AAIA,SAAOF,OAAO,CAACsB,eAAD,CAAP,CAAyBd,cAAzB,CAAP;AACD","sourcesContent":["import React, { Component } from 'react'\nimport Router from 'next/router'\nimport { connect } from 'react-redux';\nimport { CustomPageContext } from './WithReduxStore';\nimport { StoreState } from '../redux/config';\nimport { NextComponentType } from 'next';\n\n/** Type Definations */\ninterface AppProps {\n  pageProps: {}\n}\n\nexport type RouteCheck = (state: StoreState) => boolean\n\n\n/** Implement your own default route checking function */\nconst defaultCheck: RouteCheck = (state) => {\n  // should return boolean\n  return state.user.role === 'admin'\n}\n\n/** Redirect url incase of authentication failure */\nconst REDIRECT_URL = \"/login\"\n\n\n/** Actual Logic, no need to change */\nexport default function (Component: NextComponentType, routeChecker: RouteCheck = defaultCheck) {\n\n  class ProtectedRoute extends React.Component<AppProps> {\n\n    static async getInitialProps(pageContext: CustomPageContext): Promise<AppProps> {\n      const res = pageContext.res\n      if (!routeChecker(pageContext.reduxStore.getState())) {\n        if (typeof window === 'undefined') {\n          res.writeHead(302, {\n            Location: REDIRECT_URL\n          });\n          res.end();\n        } else {\n          Router.replace(REDIRECT_URL)\n        }\n      }\n\n      let appProps = {}\n      if (typeof Component.getInitialProps === 'function') {\n        appProps = await Component.getInitialProps(pageContext)\n      }\n      return { pageProps: { ...appProps } }\n    }\n\n    render() {\n      return <Component {...this.props.pageProps} />\n    }\n  }\n\n  const mapStateToProps = (state: StoreState) => {\n    return { state }\n  }\n\n  return connect(mapStateToProps)(ProtectedRoute)\n}"]},"metadata":{},"sourceType":"module"}