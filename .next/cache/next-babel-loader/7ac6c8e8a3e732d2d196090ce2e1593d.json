{"ast":null,"code":"import { createStore, combineReducers } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport DefaultStorage from 'redux-persist/lib/storage';\nimport userReducer from '../reducers/user';\nimport CustomCookieStorage from '../../utils/helpers/customCookieStorage';\nimport dataReducer from '../reducers/data';\nexport function initializeStore(req, res) {\n  // pass to server\n  const persistCookieConfig = key => ({\n    key,\n    storage: CustomCookieStorage(req, res)\n  }); // used in client local storage\n\n\n  const persistLocalConfig = key => ({\n    key,\n    storage: DefaultStorage\n  });\n\n  const rootReducer = combineReducers({\n    user: persistReducer(persistCookieConfig('user'), userReducer),\n    dataCookie: persistReducer(persistCookieConfig('data'), dataReducer),\n    dataLocal: persistReducer(persistLocalConfig('data-local'), dataReducer),\n    data: dataReducer\n  });\n  const store = createStore( // combineReducers<StoreState>({ user: userReducer })\n  rootReducer);\n  const persistor = persistStore(store, {});\n  return {\n    store,\n    persistor\n  };\n}","map":{"version":3,"sources":["/Users/raghavahuja/playground/next_ts/src/redux/config/index.ts"],"names":["createStore","combineReducers","persistStore","persistReducer","DefaultStorage","userReducer","CustomCookieStorage","dataReducer","initializeStore","req","res","persistCookieConfig","key","storage","persistLocalConfig","rootReducer","user","dataCookie","dataLocal","data","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAAoD,OAApD;AACA,SAASC,YAAT,EAAkCC,cAAlC,QAAgF,eAAhF;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,WAAP,MAAkC,kBAAlC;AAGA,OAAOC,mBAAP,MAAgC,yCAAhC;AACA,OAAOC,WAAP,MAAkC,kBAAlC;AAWA,OAAO,SAASC,eAAT,CAAyBC,GAAzB,EAAoCC,GAApC,EAAuF;AAG5F;AACA,QAAMC,mBAAmB,GAAIC,GAAD,KAAkB;AAC5CA,IAAAA,GAD4C;AAE5CC,IAAAA,OAAO,EAAEP,mBAAmB,CAACG,GAAD,EAAMC,GAAN;AAFgB,GAAlB,CAA5B,CAJ4F,CAU5F;;;AACA,QAAMI,kBAAkB,GAAIF,GAAD,KAAkB;AAC3CA,IAAAA,GAD2C;AAE3CC,IAAAA,OAAO,EAAET;AAFkC,GAAlB,CAA3B;;AAKA,QAAMW,WAAW,GAAGd,eAAe,CACjC;AACEe,IAAAA,IAAI,EAAEb,cAAc,CAACQ,mBAAmB,CAAC,MAAD,CAApB,EAA8BN,WAA9B,CADtB;AAEEY,IAAAA,UAAU,EAAEd,cAAc,CAACQ,mBAAmB,CAAC,MAAD,CAApB,EAA8BJ,WAA9B,CAF5B;AAGEW,IAAAA,SAAS,EAAEf,cAAc,CAACW,kBAAkB,CAAC,YAAD,CAAnB,EAAmCP,WAAnC,CAH3B;AAIEY,IAAAA,IAAI,EAAEZ;AAJR,GADiC,CAAnC;AAUA,QAAMa,KAAY,GAAGpB,WAAW,EAC9B;AACAe,EAAAA,WAF8B,CAAhC;AAIA,QAAMM,SAAS,GAAGnB,YAAY,CAACkB,KAAD,EAAQ,EAAR,CAA9B;AAEA,SAAO;AAAEA,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD","sourcesContent":["import { createStore, combineReducers, Store } from 'redux'\nimport { persistStore, Persistor, persistReducer, persistCombineReducers } from 'redux-persist'\nimport DefaultStorage from 'redux-persist/lib/storage'\nimport userReducer, { User } from '../reducers/user';\n\nimport ActionTypes from './types';\nimport CustomCookieStorage from '../../utils/helpers/customCookieStorage';\nimport dataReducer, { Data } from '../reducers/data';\n\nexport interface StoreState {\n  user: User,\n  dataLocal: Data,\n  dataCookie: Data,\n  data: Data\n}\n\nexport type CustomReducer<T> = (state: T, action: { type: ActionTypes, payload: any }) => T\n\nexport function initializeStore(req?: any, res?: any): { store: Store, persistor: Persistor } {\n\n\n  // pass to server\n  const persistCookieConfig = (key: string) => ({\n    key,\n    storage: CustomCookieStorage(req, res)\n  })\n\n\n  // used in client local storage\n  const persistLocalConfig = (key: string) => ({\n    key,\n    storage: DefaultStorage\n  })\n\n  const rootReducer = combineReducers(\n    {\n      user: persistReducer(persistCookieConfig('user'), userReducer),\n      dataCookie: persistReducer(persistCookieConfig('data'), dataReducer),\n      dataLocal: persistReducer(persistLocalConfig('data-local'), dataReducer),\n      data: dataReducer\n    }\n\n  )\n\n  const store: Store = createStore(\n    // combineReducers<StoreState>({ user: userReducer })\n    rootReducer\n  )\n  const persistor = persistStore(store, {})\n\n  return { store, persistor }\n}\n\n"]},"metadata":{},"sourceType":"module"}