{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/raghavahuja/playground/next_ts/src/hocs/WithReduxStore.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { initializeStore } from '../redux/config';\nconst isServer = true; // Called for every route\n\nfunction getOrCreateStore(req, res) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(req, res);\n  } // Client side store initialization\n\n\n  if (!window['redux-store']) {\n    window['redux-store'] = initializeStore();\n  } // returned on every route change\n\n\n  return window['redux-store'];\n}\n\nexport default (Component => {\n  var _temp;\n\n  return _temp = class AppWithRedux extends React.Component {\n    static async getInitialProps(appContext) {\n      const completeStore = getOrCreateStore(appContext.ctx.req, appContext.ctx.res); // Provide the store to getInitialProps of pages\n\n      appContext.ctx.reduxStore = completeStore.store;\n      appContext.ctx.persistor = completeStore.persistor;\n      let appProps = {};\n      await new _Promise((resolve, reject) => {\n        let {\n          bootstrapped\n        } = completeStore.persistor.getState();\n\n        if (bootstrapped) {\n          resolve();\n        }\n\n        completeStore.persistor.subscribe(() => {\n          let {\n            bootstrapped\n          } = completeStore.persistor.getState();\n\n          if (bootstrapped) {\n            resolve();\n          }\n        });\n      });\n\n      if (typeof Component.getInitialProps === 'function') {\n        // appProps = { pageProps: {} }, internally by next component\n        appProps = await Component.getInitialProps(appContext);\n      }\n\n      return _objectSpread({}, appProps, {\n        reduxStore: completeStore.store,\n        persistor: completeStore.persistor\n      });\n    }\n\n    constructor(props) {\n      super(props);\n\n      _defineProperty(this, \"reduxStore\", void 0);\n\n      _defineProperty(this, \"persistor\", void 0);\n\n      this.reduxStore = props.reduxStore;\n      this.persistor = props.persistor;\n\n      if (!props.reduxStore.dispatch || !props.persistor.dispatch) {\n        const completeStore = getOrCreateStore();\n        this.reduxStore = completeStore.store;\n        this.persistor = completeStore.persistor;\n      } // on first request, getInitProps is called on server and therefore store is not available via props\n      // getOrCreateStore will always create store on server side, on client side it will create store if not there or return the previously created store.\n\n    }\n\n    render() {\n      return __jsx(Component, _extends({}, this.props, {\n        reduxStore: this.reduxStore,\n        persistor: this.persistor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }));\n    }\n\n  }, _temp;\n});","map":{"version":3,"sources":["/Users/raghavahuja/playground/next_ts/src/hocs/WithReduxStore.tsx"],"names":["React","initializeStore","isServer","getOrCreateStore","req","res","window","Component","AppWithRedux","getInitialProps","appContext","completeStore","ctx","reduxStore","store","persistor","appProps","resolve","reject","bootstrapped","getState","subscribe","constructor","props","dispatch","render"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,iBAAhC;AAeA,MAAMC,QAAQ,OAAd,C,CAEA;;AACA,SAASC,gBAAT,CAA0BC,GAA1B,EAAgCC,GAAhC,EAA8E;AAC5E;AACA,MAAIH,QAAJ,EAAc;AACZ,WAAOD,eAAe,CAACG,GAAD,EAAMC,GAAN,CAAtB;AACD,GAJ2E,CAM5E;;;AACA,MAAI,CAACC,MAAM,CAAC,aAAD,CAAX,EAA4B;AAC1BA,IAAAA,MAAM,CAAC,aAAD,CAAN,GAAwBL,eAAe,EAAvC;AACD,GAT2E,CAW5E;;;AACA,SAAOK,MAAM,CAAC,aAAD,CAAb;AACD;;AAED,gBAAgBC,SAAD,IAAoB;AAAA;;AACjC,iBAAO,MAAMC,YAAN,SAA2BR,KAAK,CAACO,SAAjC,CAA2C;AAEhD,iBAAaE,eAAb,CAA6BC,UAA7B,EAA2D;AAEzD,YAAMC,aAAa,GAAGR,gBAAgB,CAACO,UAAU,CAACE,GAAX,CAAeR,GAAhB,EAAqBM,UAAU,CAACE,GAAX,CAAeP,GAApC,CAAtC,CAFyD,CAIzD;;AACAK,MAAAA,UAAU,CAACE,GAAX,CAAeC,UAAf,GAA4BF,aAAa,CAACG,KAA1C;AACAJ,MAAAA,UAAU,CAACE,GAAX,CAAeG,SAAf,GAA2BJ,aAAa,CAACI,SAAzC;AAEA,UAAIC,QAAQ,GAAG,EAAf;AAEA,YAAM,aAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrC,YAAI;AAAEC,UAAAA;AAAF,YAAmBR,aAAa,CAACI,SAAd,CAAwBK,QAAxB,EAAvB;;AAEA,YAAID,YAAJ,EAAkB;AAChBF,UAAAA,OAAO;AACR;;AAEDN,QAAAA,aAAa,CAACI,SAAd,CAAwBM,SAAxB,CAAkC,MAAM;AACtC,cAAI;AAAEF,YAAAA;AAAF,cAAmBR,aAAa,CAACI,SAAd,CAAwBK,QAAxB,EAAvB;;AACA,cAAID,YAAJ,EAAkB;AAChBF,YAAAA,OAAO;AACR;AAEF,SAND;AAQD,OAfK,CAAN;;AAiBA,UAAI,OAAOV,SAAS,CAACE,eAAjB,KAAqC,UAAzC,EAAqD;AACnD;AACAO,QAAAA,QAAQ,GAAG,MAAMT,SAAS,CAACE,eAAV,CAA0BC,UAA1B,CAAjB;AACD;;AAED,+BACKM,QADL;AAEEH,QAAAA,UAAU,EAAEF,aAAa,CAACG,KAF5B;AAGEC,QAAAA,SAAS,EAAEJ,aAAa,CAACI;AAH3B;AAMD;;AAIDO,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;;AADiB;;AAAA;;AAGjB,WAAKV,UAAL,GAAkBU,KAAK,CAACV,UAAxB;AACA,WAAKE,SAAL,GAAiBQ,KAAK,CAACR,SAAvB;;AAEA,UAAI,CAACQ,KAAK,CAACV,UAAN,CAAiBW,QAAlB,IAA8B,CAACD,KAAK,CAACR,SAAN,CAAgBS,QAAnD,EAA6D;AAC3D,cAAMb,aAAa,GAAGR,gBAAgB,EAAtC;AACA,aAAKU,UAAL,GAAkBF,aAAa,CAACG,KAAhC;AACA,aAAKC,SAAL,GAAiBJ,aAAa,CAACI,SAA/B;AACD,OAVgB,CAWjB;AACA;;AAED;;AAEDU,IAAAA,MAAM,GAAG;AACP,aAAO,MAAC,SAAD,eAAe,KAAKF,KAApB;AAA2B,QAAA,UAAU,EAAE,KAAKV,UAA5C;AAAwD,QAAA,SAAS,EAAE,KAAKE,SAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AA9D+C,GAAlD;AAgED,CAjED","sourcesContent":["import React from 'react'\nimport { initializeStore } from '../redux/config'\nimport { Store } from 'redux';\nimport NextComponent, { AppContext } from 'next/app'\nimport { NextComponentType, NextPageContext } from 'next';\nimport { Persistor } from 'redux-persist';\n\nexport interface CustomPageContext extends NextPageContext {\n  reduxStore: Store,\n  persistor: Persistor\n}\n\ninterface CustomAppContext extends AppContext {\n  ctx: CustomPageContext\n}\n\nconst isServer = typeof window === 'undefined'\n\n// Called for every route\nfunction getOrCreateStore(req?, res?): { store: Store, persistor: Persistor } {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(req, res)\n  }\n\n  // Client side store initialization\n  if (!window['redux-store']) {\n    window['redux-store'] = initializeStore()\n  }\n\n  // returned on every route change\n  return window['redux-store']\n}\n\nexport default (Component: any) => {\n  return class AppWithRedux extends React.Component {\n\n    static async getInitialProps(appContext: CustomAppContext) {\n\n      const completeStore = getOrCreateStore(appContext.ctx.req, appContext.ctx.res)\n\n      // Provide the store to getInitialProps of pages\n      appContext.ctx.reduxStore = completeStore.store\n      appContext.ctx.persistor = completeStore.persistor\n\n      let appProps = {}\n\n      await new Promise((resolve, reject) => {\n        let { bootstrapped } = completeStore.persistor.getState()\n\n        if (bootstrapped) {\n          resolve()\n        }\n\n        completeStore.persistor.subscribe(() => {\n          let { bootstrapped } = completeStore.persistor.getState()\n          if (bootstrapped) {\n            resolve()\n          }\n\n        })\n\n      })\n\n      if (typeof Component.getInitialProps === 'function') {\n        // appProps = { pageProps: {} }, internally by next component\n        appProps = await Component.getInitialProps(appContext)\n      }\n\n      return {\n        ...appProps,\n        reduxStore: completeStore.store,\n        persistor: completeStore.persistor\n      }\n\n    }\n\n    reduxStore: Store\n    persistor: Persistor\n    constructor(props) {\n      super(props)\n\n      this.reduxStore = props.reduxStore\n      this.persistor = props.persistor\n\n      if (!props.reduxStore.dispatch || !props.persistor.dispatch) {\n        const completeStore = getOrCreateStore()\n        this.reduxStore = completeStore.store\n        this.persistor = completeStore.persistor\n      }\n      // on first request, getInitProps is called on server and therefore store is not available via props\n      // getOrCreateStore will always create store on server side, on client side it will create store if not there or return the previously created store.\n\n    }\n\n    render() {\n      return <Component {...this.props} reduxStore={this.reduxStore} persistor={this.persistor} />\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}